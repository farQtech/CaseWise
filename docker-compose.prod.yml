version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend.Dockerfile
    ports:
      - "${PORT:-8080}:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - WORKER_API_KEY=${WORKER_API_KEY:-worker-secret-key}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - RAILWAY_STATIC_URL=${RAILWAY_STATIC_URL}
    volumes:
      - app_data:/app/APP_DATA
    networks:
      - case-wise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Background Worker Service
  worker:
    build:
      context: ./worker
      dockerfile: ../docker/worker.Dockerfile
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://backend:8080
      - WORKER_API_KEY=${WORKER_API_KEY:-worker-secret-key}
    volumes:
      - app_data:/app/APP_DATA
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - case-wise-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend.Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - case-wise-network
    restart: unless-stopped

networks:
  case-wise-network:
    driver: bridge

volumes:
  app_data: 